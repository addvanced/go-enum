// Package {{ .PackageName }} adds an enum value and parsing functions for the enum type {{ .Enum.TypeName }}.
//
// Code generated by github.com/addvanced/go-enum . DO NOT EDIT!
package {{ .PackageName }}

import (
	"errors"
	"slices"
)

// Define the enum type
type {{ .Enum.TypeName }}Enum {{ .Enum.BaseType }}

// Define enum values
const (
{{- range $index, $value := .Enum.Values }}
{{- if contains $.Enum.BaseType "int" }}
    {{- if eq $index 0 }}
	{{ $.Enum.TypeName }}{{ $value.Name }} {{ $.Enum.TypeName }}Enum = iota
    {{- else }}
	{{ $.Enum.TypeName }}{{ $value.Name }}
    {{- end }}
{{- else }}
	{{ $.Enum.TypeName }}{{ $value.Name }} {{ $.Enum.TypeName }}Enum = {{ if $value.Value }}{{ $value.Value }}{{ else }}{{ defaultFor $.Enum.BaseType }}{{ end }}
{{- end }}
{{- end }}
)

// Slice of all enum values
var {{ .Enum.TypeName | lower }}Enums = []{{ .Enum.TypeName }}Enum{
{{- range .Enum.Values }}
	{{ .Name }},
{{- end }}
}

// Parse function to get the enum from a string
func Parse{{ .Enum.TypeName }}Enum(name string) ({{ .Enum.TypeName }}Enum, error) {
	if enumValue := {{ .Enum.TypeName}}Enum(name); slices.Contains({{ .Enum.TypeName | lower }}Enums, enumValue) {
		return enumValue, nil
	}
	return {{ defaultFor $.Enum.BaseType }}, errors.New("invalid {{ .Enum.TypeName }}Enum name")
}

// Value function to retrieve the underlying value
func (e {{ .Enum.TypeName }}Enum) Value() {{ .Enum.BaseType }} {
	return {{ .Enum.BaseType }}(e)
}